[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2025-08-31 21:02:47.848784",
  "module": null,
  "name": "adjust script",
  "script": "frappe.ui.form.on('Production Plan', {\n\trefresh(frm) {\n\t\t// your code here\n\t}\n})\n\nfrappe.ui.form.on(\"Material Request Plan Item\", {\n    custom_adjusted_qty: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        \n        if (row.custom_adjusted_qty && row.custom_adjusted_qty > 0) {\n            row.required_bom_qty = row.custom_adjusted_qty;\n        } else {\n            row.required_bom_qty = row.quantity;\n        }\n\n        // Refresh the parent child table field (from Production Plan: mr_items)\n        frm.refresh_field(\"mr_items\");\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2025-09-02 15:53:48.801299",
  "module": null,
  "name": "grouped raw materials",
  "script": "const DEFAULT_WAREHOUSE = \"Factory-WIP - SYN\";\r\n\r\nfrappe.ui.form.on(\"Production Plan\", {\r\n    refresh: function(frm) {\r\n        frm.add_custom_button(\"Populate MR Items\", async function() {\r\n            await populate_grouped_mr_items(frm);\r\n        });\r\n    }\r\n});\r\n\r\nasync function populate_grouped_mr_items(frm) {\r\n    // Clear table\r\n    frm.clear_table(\"mr_items\");\r\n\r\n    if (!frm.doc.po_items || !frm.doc.po_items.length) {\r\n        frm.refresh_field(\"mr_items\");\r\n        return;\r\n    }\r\n\r\n    const all_rows = [];\r\n\r\n    for (let pp_item of frm.doc.po_items) {\r\n        if (!pp_item.bom_no) continue;\r\n\r\n        const planned_qty = pp_item.planned_qty || 1;\r\n        let bom_items = [];\r\n\r\n        try {\r\n            const r = await frappe.call({\r\n                method: \"erpnext.manufacturing.doctype.bom.bom.get_bom_items\",\r\n                args: { bom: pp_item.bom_no, company: frm.doc.company }\r\n            });\r\n            bom_items = r.message || [];\r\n        } catch (e) {\r\n            console.error(`Failed to fetch BOM for ${pp_item.bom_no}:`, e);\r\n        }\r\n\r\n        bom_items.forEach(bi => {\r\n            all_rows.push({\r\n                custom_parent_item: pp_item.item_code,  // IMPORTANT: keeps track of parent\r\n                item_code: bi.item_code,\r\n                item_name: bi.item_name || \"\",\r\n                from_warehouse: bi.default_warehouse || DEFAULT_WAREHOUSE,\r\n                warehouse: bi.default_warehouse || DEFAULT_WAREHOUSE,\r\n                material_request_type: \"Manufacture\",\r\n                quantity: bi.qty * planned_qty,\r\n                custom_adjusted_qty: bi.qty * planned_qty,\r\n                schedule_date: frm.doc.planned_date || frappe.datetime.now_date(),\r\n                uom: bi.uom || \"\",\r\n                description: bi.description || \"\"\r\n            });\r\n        });\r\n    }\r\n\r\n    // Add all rows\r\n    all_rows.forEach(row => {\r\n        const r = frm.add_child(\"mr_items\");\r\n        Object.assign(r, row);\r\n    });\r\n\r\n    frm.refresh_field(\"mr_items\");\r\n\r\n    // Cosmetic separators for display only\r\n    const wrapper = $(frm.fields_dict.mr_items.grid.wrapper);\r\n    const grouped = {};\r\n\r\n    wrapper.find(\".grid-row\").each(function() {\r\n        const row_name = $(this).attr(\"data-name\");\r\n        const row_doc = frappe.get_doc(\"Material Request Plan Item\", row_name);\r\n        if (!grouped[row_doc.custom_parent_item]) grouped[row_doc.custom_parent_item] = [];\r\n        grouped[row_doc.custom_parent_item].push($(this));\r\n    });\r\n\r\n    Object.keys(grouped).forEach(parent_item => {\r\n        const rows = grouped[parent_item];\r\n        if (rows.length > 0) {\r\n            const first_row = rows[0];\r\n            const sep = $('<div>')\r\n                .text(`--- Materials for ${parent_item} ---`)\r\n                .css({\r\n                    \"font-weight\": \"bold\",\r\n                    \"background-color\": \"#f2f2f2\",\r\n                    \"padding\": \"4px 8px\"\r\n                });\r\n            first_row.before(sep);\r\n        }\r\n    });\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2025-09-03 12:20:53.364750",
  "module": null,
  "name": "Stiching Entries",
  "script": "// =====================\r\n// Production Plan Client Script\r\n// =====================\r\n\r\n// Event on child table (Production Plan Item)\r\nfrappe.ui.form.on(\"Production Plan Item\", {\r\n    bom_no: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        check_bom_for_stitching(frm, row);\r\n    }\r\n});\r\n\r\n// Event on main form (Production Plan)\r\nfrappe.ui.form.on(\"Production Plan\", {\r\n    refresh: function(frm) {\r\n        console.log(\"Production Plan Client Script loaded!\");\r\n\r\n        // Re-check all BOMs on refresh so visibility stays after Save\r\n        if (frm.doc.po_items && frm.doc.po_items.length) {\r\n            frm.doc.po_items.forEach(row => check_bom_for_stitching(frm, row));\r\n        } else {\r\n            update_work_sections(frm);\r\n        }\r\n\r\n        // ðŸ”¹ Example filter for Work Table items (optional)\r\n        frm.set_query(\"item_code\", \"custom_work_table\", function() {\r\n            return {\r\n                filters: [\r\n                    [\"Item\", \"item_code\", \"in\", (frm.doc.po_items || []).map(d => d.item_code)]\r\n                ]\r\n            };\r\n        });\r\n    }\r\n});\r\n\r\n// =====================\r\n// Helpers\r\n// =====================\r\n\r\n// Call backend to check if BOM has stitching\r\nfunction check_bom_for_stitching(frm, row) {\r\n    if (!row || !row.bom_no) {\r\n        row.has_stitching = 0;\r\n        update_work_sections(frm);\r\n        return;\r\n    }\r\n\r\n    frappe.call({\r\n        method: \"erpnext.manufacturing.doctype.bom.bom.get_bom_operations\",\r\n        args: { bom_no: row.bom_no },\r\n        callback: function(res) {\r\n            if (!res.message) {\r\n                row.has_stitching = 0;\r\n            } else {\r\n                let hasStitching = res.message.some(op => op.operation === \"Stitching\");\r\n                row.has_stitching = hasStitching ? 1 : 0;\r\n            }\r\n            update_work_sections(frm); // recalc for all rows\r\n        },\r\n        error: function(err) {\r\n            console.error(\"Error fetching BOM operations:\", err);\r\n            row.has_stitching = 0;\r\n            update_work_sections(frm);\r\n        }\r\n    });\r\n}\r\n\r\n// Toggle UI based on ALL rows\r\nfunction update_work_sections(frm) {\r\n    let hasAnyStitching = (frm.doc.po_items || []).some(r => r.has_stitching);\r\n    frm.toggle_display(\"custom_work_entries\", hasAnyStitching);\r\n    frm.toggle_display(\"custom_work_table\", hasAnyStitching);\r\n    console.log(\"Work Sections visible?\", hasAnyStitching);\r\n    let stitchingRows = (frm.doc.po_items || []).filter(d => d.has_stitching);\r\n\r\n    if (!stitchingRows.length) {\r\n        frm.set_df_property(\"custom_work_entries\", \"hidden\", 1);\r\n        return;\r\n    }\r\n\r\n    frm.set_df_property(\"custom_work_entries\", \"hidden\", 0);\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2025-09-02 14:45:57.197153",
  "module": null,
  "name": "Auto-calc amount",
  "script": "frappe.ui.form.on(\"Stitching Entry\", {\r\n    quantity: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        row.amount = (row.quantity || 0) * (row.rate || 0);\r\n        frm.refresh_field(\"stitching_entries\");\r\n    },\r\n    rate: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        row.amount = (row.quantity || 0) * (row.rate || 0);\r\n        frm.refresh_field(\"stitching_entries\");\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2025-09-03 12:20:56.365261",
  "module": null,
  "name": "Filter item code in work  cards",
  "script": "frappe.ui.form.on(\"Production Plan\", {\r\n    refresh: function(frm) {\r\n        if (frm.doc.po_items && frm.doc.po_items.length) {\r\n            frm.doc.po_items.forEach(row => {\r\n                if (row.bom_no) {\r\n                    frappe.call({\r\n                        method: \"erpnext.manufacturing.doctype.bom.bom.get_bom_operations\",\r\n                        args: { bom_no: row.bom_no },\r\n                        callback: function(res) {\r\n                            if (!res.message) {\r\n                                row.has_stitching = 0;\r\n                            } else {\r\n                                let hasStitching = res.message.some(op => op.operation === \"Stitching\");\r\n                                row.has_stitching = hasStitching ? 1 : 0;\r\n                            }\r\n                            update_work_sections(frm);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        } else {\r\n            update_work_sections(frm, false);\r\n        }\r\n\r\n        // ðŸ”¹ Filter items inside Work Table\r\n        frm.set_query(\"item_code\", \"custom_work_table\", function() {\r\n            return {\r\n                filters: [\r\n                    [\"Item\", \"item_code\", \"in\",\r\n                        (frm.doc.po_items || [])\r\n                            .filter(d => d.has_stitching)   // âœ… Only stitching BOMs\r\n                            .map(d => d.item_code)\r\n                    ]\r\n                ]\r\n            };\r\n        });\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Production Plan",
  "enabled": 1,
  "modified": "2025-09-03 12:37:29.578197",
  "module": null,
  "name": "planned work validator",
  "script": "frappe.ui.form.on(\"Production Plan\", {\r\n  validate(frm) {\r\n    const toNum = v => {\r\n      const n = parseFloat(v);\r\n      return Number.isFinite(n) ? n : 0;\r\n    };\r\n    const eq = (a, b) => Math.abs(toNum(a) - toNum(b)) < 1e-9;\r\n\r\n    const pick = (row, keys) => {\r\n      for (const k of keys) {\r\n        if (row && row[k] !== undefined && row[k] !== null && row[k] !== \"\") return row[k];\r\n      }\r\n      return undefined;\r\n    };\r\n    const add = (map, key, val) => (map[key] = toNum((map[key] || 0) + toNum(val || 0)));\r\n\r\n    // -------------------------\r\n    // Planned rows (filter only BOMs with stitching)\r\n    // -------------------------\r\n    const plannedByItem = {};\r\n    const plannedByItemBom = {};\r\n    const itemToBoms = {};\r\n    (frm.doc.po_items || [])\r\n      .filter(r => r.has_stitching)   // âœ… skip BOMs without stitching\r\n      .forEach(r => {\r\n        const item = r.item_code;\r\n        const bom  = r.bom_no;\r\n        const qty  = toNum(r.planned_qty);\r\n        if (!item || !qty) return;\r\n        add(plannedByItem, item, qty);\r\n        if (bom) {\r\n          add(plannedByItemBom, `${item}::${bom}`, qty);\r\n          (itemToBoms[item] ||= new Set()).add(bom);\r\n        }\r\n      });\r\n\r\n    // -------------------------\r\n    // Work entries (child table)\r\n    // -------------------------\r\n    const workByItem = {};\r\n    const workByItemBom = {};\r\n    let anyWorkHasBom = false;\r\n    (frm.doc.custom_work_table || []).forEach(r => {\r\n      const item = pick(r, [\"item\", \"item_code\"]);\r\n      const bom  = pick(r, [\"bom\", \"bom_no\"]);\r\n      const qty  = toNum(pick(r, [\"quantity_pcs\", \"quantitypcs\", \"qty\", \"quantity\", \"qty_pcs\"]));\r\n      if (!item || !qty) return;\r\n\r\n      // âœ… check if the BOM on this row is stitching-enabled\r\n      let bomHasStitching = true;\r\n      if (bom) {\r\n        const plannedRow = (frm.doc.po_items || []).find(p => p.item_code === item && p.bom_no === bom);\r\n        bomHasStitching = plannedRow ? !!plannedRow.has_stitching : true;\r\n      }\r\n      if (!bomHasStitching) return; // skip validation for non-stitching BOM rows\r\n\r\n      add(workByItem, item, qty);\r\n      if (bom) {\r\n        anyWorkHasBom = true;\r\n        add(workByItemBom, `${item}::${bom}`, qty);\r\n      }\r\n    });\r\n\r\n    // -------------------------\r\n    // Validation checks\r\n    // -------------------------\r\n    const errors = [];\r\n    if (anyWorkHasBom) {\r\n      Object.keys(plannedByItemBom).forEach(key => {\r\n        const planned = plannedByItemBom[key];\r\n        const worked  = toNum(workByItemBom[key] || 0);\r\n        if (!eq(planned, worked)) {\r\n          const [item, bom] = key.split(\"::\");\r\n          errors.push(`For Item ${item} (BOM ${bom}), Work Entries total (${worked}) does not match Planned (${planned}).`);\r\n        }\r\n      });\r\n      Object.keys(workByItemBom).forEach(key => {\r\n        if (!plannedByItemBom[key]) {\r\n          const [item, bom] = key.split(\"::\");\r\n          errors.push(`Work Entry exists for Item ${item} (BOM ${bom}) but it is not present in Planned items.`);\r\n        }\r\n      });\r\n    } else {\r\n      Object.entries(itemToBoms).forEach(([item, set]) => {\r\n        if (set.size > 1) {\r\n          errors.push(`Item ${item} has multiple BOMs planned (${Array.from(set).join(\", \")}). Add/select a BOM column in Work Entries and fill it per row.`);\r\n        }\r\n      });\r\n      Object.keys(plannedByItem).forEach(item => {\r\n        const planned = plannedByItem[item];\r\n        const worked  = toNum(workByItem[item] || 0);\r\n        if (!eq(planned, worked)) {\r\n          errors.push(`For Item ${item}, Work Entries total (${worked}) does not match Planned (${planned}).`);\r\n        }\r\n      });\r\n      Object.keys(workByItem).forEach(item => {\r\n        if (!plannedByItem[item]) {\r\n          errors.push(`Work Entry exists for Item ${item} but it is not present in Planned items.`);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (errors.length) {\r\n      const esc = s => String(s).replace(/[&<>\"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','\"':'&quot;',\"'\":'&#39;'}[c]));\r\n      const listHtml = `<ul>${errors.map(e => `<li>${esc(e)}</li>`).join(\"\")}</ul>`;\r\n      frappe.throw({\r\n        title: \"Validation Error\",\r\n        message: listHtml,\r\n        indicator: \"red\",\r\n      });\r\n    }\r\n  }\r\n});\r\n",
  "view": "Form"
 }
]