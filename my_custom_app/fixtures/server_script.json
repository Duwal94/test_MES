[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-02 12:34:47.738199",
  "module": null,
  "name": "auto production",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Production Plan",
  "script": "# Type: DocType Event\r\n# Ref Doctype: Production Plan\r\n# Trigger: on_submit\r\n\r\nDEFAULT_WAREHOUSE = \"Factory-WIP - SYN\"  # single warehouse for RM/WIP/FG\r\n\r\ndef dbg(stage, docname, msg):\r\n    frappe.msgprint(f\"[{stage}] [{docname}] {msg}\")\r\n\r\ncreated = []\r\nstage = \"INIT\"\r\n\r\ntry:\r\n    pp_name = doc.name\r\n    for po in (doc.get(\"po_items\") or []):\r\n        stage = \"WO-Preflight\"\r\n        qty = float(po.get(\"planned_qty\") or 0)\r\n        item_code = po.get(\"item_code\")\r\n        bom_no = po.get(\"bom_no\")\r\n        if qty <= 0 or not item_code or not bom_no:\r\n            continue\r\n\r\n        # 1) Create + submit Work Order\r\n        stage = \"WO-Create\"\r\n        wo = frappe.new_doc(\"Work Order\")\r\n        wo.update({\r\n            \"production_item\": item_code,\r\n            \"bom_no\": bom_no,\r\n            \"qty\": qty,\r\n            \"company\": doc.company,\r\n            \"source_warehouse\": DEFAULT_WAREHOUSE,\r\n            \"wip_warehouse\": DEFAULT_WAREHOUSE,\r\n            \"fg_warehouse\": DEFAULT_WAREHOUSE,\r\n        })\r\n        wo.insert(ignore_permissions=True)\r\n        dbg(stage, pp_name, f\"WO {wo.name} created {item_code} x {qty}\")\r\n\r\n        # Optional: attach adjusted RM totals (dedup)\r\n        stage = \"WO-Items\"\r\n        wo.set(\"required_items\", [])\r\n        totals = {}\r\n\r\n        # === FIXED: Only take MR items belonging to current PO item ===\r\n        for mr in (doc.get(\"mr_items\") or []):\r\n            if mr.get(\"custom_parent_item\") != item_code:\r\n                continue  # skip MR items of other PO items\r\n            code = mr.get(\"item_code\")\r\n            adj = float(mr.get(\"custom_adjusted_qty\") or 0)\r\n            if code and adj > 0:\r\n                totals[code] = totals.get(code, 0) + adj\r\n\r\n        for code, req_qty in (totals or {}).items():\r\n            res = frappe.db.get_value(\"Item\", code, [\"stock_uom\", \"item_name\"], as_dict=True) or {}\r\n            stock_uom = res.get(\"stock_uom\") or \"Nos\"\r\n            item_name = res.get(\"item_name\") or code\r\n            wo.append(\"required_items\", {\r\n                \"item_code\": code,\r\n                \"item_name\": item_name,\r\n                \"uom\": stock_uom,\r\n                \"stock_uom\": stock_uom,\r\n                \"conversion_factor\": 1.0,\r\n                \"source_warehouse\": DEFAULT_WAREHOUSE,\r\n                \"required_qty\": req_qty,\r\n            })\r\n\r\n        wo.flags.ignore_validate = True\r\n        wo.flags.ignore_mandatory = True\r\n        wo.save(ignore_permissions=True)\r\n        wo.submit()\r\n        dbg(stage, pp_name, f\"WO {wo.name} submitted\")\r\n\r\n        # 2) Build Manufacture Stock Entry\r\n        stage = \"SE-Build\"\r\n        se = frappe.new_doc(\"Stock Entry\")\r\n        se.update({\r\n            \"stock_entry_type\": \"Manufacture\",\r\n            \"company\": doc.company,\r\n            \"work_order\": wo.name,\r\n            \"bom_no\": wo.bom_no,\r\n            \"fg_completed_qty\": wo.qty,\r\n            \"set_posting_time\": 1,\r\n            \"posting_date\": doc.posting_date or frappe.utils.today(),\r\n            \"remarks\": f\"Auto from Production Plan {pp_name}\",\r\n        })\r\n        se.get_items()\r\n        dbg(stage, pp_name, f\"Initial SE rows: {len(se.items or [])}\")\r\n\r\n        # 3) Ensure FG row exists; if missing, append it\r\n        stage = \"SE-Ensure-FG\"\r\n        rows = (se.items or [])\r\n        fg_rows = [r for r in rows if int(r.get(\"is_finished_item\") or 0) == 1]\r\n        if not fg_rows:\r\n            fg_uom = frappe.db.get_value(\"Item\", wo.production_item, \"stock_uom\") or \"Nos\"\r\n            fg = se.append(\"items\", {\r\n                \"item_code\": wo.production_item,\r\n                \"is_finished_item\": 1,\r\n                \"t_warehouse\": DEFAULT_WAREHOUSE,\r\n                \"qty\": wo.qty,\r\n                \"uom\": fg_uom,\r\n                \"stock_uom\": fg_uom,\r\n                \"conversion_factor\": 1.0,\r\n            })\r\n            dbg(stage, pp_name, f\"FG row added for {wo.production_item}\")\r\n            rows = (se.items or [])\r\n\r\n        # 4) Sanitize warehouses: only one side per row\r\n        stage = \"SE-Sanitize\"\r\n        for r in (rows or []):\r\n            if int(r.get(\"is_finished_item\") or 0) == 1:\r\n                r.set(\"t_warehouse\", DEFAULT_WAREHOUSE)\r\n                r.set(\"s_warehouse\", None)\r\n            else:\r\n                r.set(\"s_warehouse\", DEFAULT_WAREHOUSE)\r\n                r.set(\"t_warehouse\", None)\r\n\r\n            # final guard: if both set and equal, clear the wrong side\r\n            swh = r.get(\"s_warehouse\")\r\n            twh = r.get(\"t_warehouse\")\r\n            if swh and twh and swh == twh:\r\n                if int(r.get(\"is_finished_item\") or 0) == 1:\r\n                    r.set(\"s_warehouse\", None)\r\n                else:\r\n                    r.set(\"t_warehouse\", None)\r\n\r\n        # 5) Adjust RM quantities to totals\r\n        stage = \"SE-Adjust-RM\"\r\n        rm_index = {r.get(\"item_code\"): r for r in (se.items or []) if int(r.get(\"is_finished_item\") or 0) == 0}\r\n        for code, req_qty in (totals or {}).items():\r\n            if code in rm_index:\r\n                rm_index[code].set(\"qty\", float(req_qty))\r\n            else:\r\n                res = frappe.db.get_value(\"Item\", code, [\"stock_uom\"], as_dict=True) or {}\r\n                se.append(\"items\", {\r\n                    \"item_code\": code,\r\n                    \"s_warehouse\": DEFAULT_WAREHOUSE,\r\n                    \"qty\": float(req_qty),\r\n                    \"uom\": (res.get(\"stock_uom\") or \"Nos\"),\r\n                    \"stock_uom\": (res.get(\"stock_uom\") or \"Nos\"),\r\n                    \"conversion_factor\": 1.0,\r\n                })\r\n\r\n        # 6) Final FG check\r\n        stage = \"SE-Validate-FG\"\r\n        if not any(int(r.get(\"is_finished_item\") or 0) == 1 for r in (se.items or [])):\r\n            frappe.throw(f\"[{stage}] Could not ensure Finished Good row for {wo.production_item}\")\r\n\r\n        # 7) Submit SE\r\n        stage = \"SE-Submit\"\r\n        se.insert(ignore_permissions=True)\r\n        se.submit()\r\n        dbg(stage, pp_name, f\"SE {se.name} submitted for WO {wo.name}\")\r\n\r\n        created.append(f\"{wo.name} -> {se.name}\")\r\n\r\n    if created:\r\n        frappe.msgprint(\"Auto Completed WOs:\\n\" + \"\\n\".join(created))\r\n\r\n    # --- Close the Production Plan if everything succeeded ---\r\n    doc.db_set(\"status\", \"Closed\")\r\n    dbg(\"PP-Close\", pp_name, \"Production Plan closed successfully\")\r\n\r\nexcept Exception as e:\r\n    frappe.throw(f\"[{stage}] {e}\")\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-08-31 21:00:02.449225",
  "module": null,
  "name": "adjust script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Material Request Plan Item",
  "script": "if doc.custom_adjusted_qty and doc.custom_adjusted_qty > 0:\r\n    doc.required_bom_qty = doc.custom_adjusted_qty\r\nelse:\r\n    doc.required_bom_qty = doc.quantity\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_bom_items_sql",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-01 21:28:03.631696",
  "module": null,
  "name": "get_bom_items_sql",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "@frappe.whitelist()\r\ndef get_bom_items_sql(bom_no):\r\n    \"\"\"Get BOM items using SQL query\"\"\"\r\n    query = \"\"\"\r\n        SELECT \r\n            bi.item_code, \r\n            bi.item_name, \r\n            bi.qty, \r\n            bi.rate,\r\n            bi.uom,\r\n            bi.description,\r\n            item.stock_uom\r\n        FROM `tabBOM Item` bi\r\n        JOIN `tabItem` item ON bi.item_code = item.name\r\n        WHERE bi.parent = %s\r\n        ORDER BY bi.idx\r\n    \"\"\"\r\n    \r\n    bom_items = frappe.db.sql(query, bom_no, as_dict=True)\r\n    return bom_items",
  "script_type": "API"
 }
]